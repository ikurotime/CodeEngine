// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(contents templ.Component) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><script defer src=\"https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js\"></script><link href=\"https://cdn.jsdelivr.net/npm/vscode-codicons@0.0.17/dist/codicon.min.css\" rel=\"stylesheet\"></head><body class=\"bg-gray-100\"><div id=\"contents\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = contents.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><script type=\"module\">\n\t\timport * as monaco from 'https://cdn.jsdelivr.net/npm/monaco-editor@0.39.0/+esm';\n\n\t\t// Alpine.js global store for editor state\n\t\tAlpine.store('editorState', {\n\t\t\tlanguage: 'python',\n\t\t\ttheme: 'vs-dark',\n\t\t\tavailableLanguages: {\n\t\t\t\t'python3': 'python',\n\t\t\t\t'nodejs': 'javascript'\n\t\t\t},\n\t\t\tavailableThemes: ['vs', 'vs-dark', 'hc-black'],\n\n\t\t\t// Method to update language\n\t\t\tsetLanguage(lang) {\n\t\t\t\tthis.language = this.availableLanguages[lang] || lang;\n\t\t\t\twindow.reinitializeEditor();\n\t\t\t},\n\n\t\t\t// Method to update theme\n\t\t\tsetTheme(theme) {\n\t\t\t\tthis.theme = theme;\n\t\t\t\twindow.reinitializeEditor();\n\t\t\t}\n\t\t});\n\n\t\tlet editorInstance = null;\n\n\t\t// Function to create/recreate the Monaco editor\n\t\twindow.reinitializeEditor = function () {\n\t\t\tconst container = document.querySelector('#container');\n\t\t\tconst hiddenInput = document.querySelector('#code');\n\n\t\t\tif (!container) return; // Container might not be loaded yet\n\n\t\t\t// Preserve existing content if editor exists\n\t\t\tlet existingContent = '';\n\t\t\tif (editorInstance) {\n\t\t\t\texistingContent = editorInstance.getValue();\n\t\t\t\teditorInstance.dispose(); // Clean up the old editor\n\t\t\t}\n\n\t\t\t// Create new editor instance\n\t\t\teditorInstance = monaco.editor.create(container, {\n\t\t\t\tlanguage: Alpine.store('editorState').language,\n\t\t\t\ttheme: Alpine.store('editorState').theme,\n\t\t\t\tvalue: existingContent,\n\t\t\t\tautomaticLayout: true,\n\t\t\t\tminimap: { enabled: false },\n\t\t\t\tfontSize: 14,\n\t\t\t\tlineNumbers: 'on',\n\t\t\t\twordWrap: 'on'\n\t\t\t});\n\n\t\t\t// Update hidden input on content change\n\t\t\tfunction updateHiddenInput() {\n\t\t\t\tif (hiddenInput) {\n\t\t\t\t\thiddenInput.value = editorInstance.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t\teditorInstance.onDidChangeModelContent(updateHiddenInput);\n\n\t\t\t// Initial update of hidden input\n\t\t\tupdateHiddenInput();\n\t\t};\n\n\t\t// Initialize editor when DOM is ready\n\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\t// Small delay to ensure Alpine.js is initialized\n\t\t\tsetTimeout(() => {\n\t\t\t\twindow.reinitializeEditor();\n\t\t\t}, 100);\n\t\t});\n\n\t\t// Make the editor instance globally accessible for debugging\n\t\twindow.getEditor = () => editorInstance;\n\t</script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
